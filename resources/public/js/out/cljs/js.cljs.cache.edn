;; Analyzed by ClojureScript 1.7.28
{:use-macros {dump-core cljs.js}, :excludes #{}, :name cljs.js, :imports {StringBuffer goog.string.StringBuffer}, :requires {cljs.compiler cljs.compiler, comp cljs.compiler, cljs.tools.reader cljs.tools.reader, tags cljs.tagged-literals, r cljs.tools.reader, goog.crypt.base64 goog.crypt.base64, cljs.tools.reader.reader-types cljs.tools.reader.reader-types, cljs.env cljs.env, ana cljs.analyzer, sm cljs.source-map, StringBuffer goog.string.StringBuffer, cljs.tagged-literals cljs.tagged-literals, env cljs.env, string clojure.string, base64 goog.crypt.base64, cljs.analyzer cljs.analyzer, cljs.source-map cljs.source-map, rt cljs.tools.reader.reader-types, clojure.string clojure.string}, :uses nil, :defs {*load-fn* {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 75, :column 3, :end-line 75, :end-column 12, :doc "Each runtime environment provides a different way to load a library.\n  Whatever function *load-fn* is bound to will be passed two arguments - a\n  map and a callback function: The map will have the following keys:\n\n  :name   - the name of the library (a symbol)\n  :macros - modifier signaling a macros namespace load\n  :path   - munged relative library path (a string)\n\n  It is up to the implementor to correctly resolve the corresponding .cljs,\n  .cljc, or .js resource (the order must be respected). If :macros is true\n  resolution should only consider .clj or .cljc resources (the order must be\n  respected). Upon resolution the callback should be invoked with a map\n  containing the following keys:\n\n  :lang       - the language, :clj or :js\n  :source     - the source of the library (a string)\n  :cache      - optional, if a :clj namespace has been precompiled to :js, can\n                give an analysis cache for faster loads.\n  :source-map - optional, if a :clj namespace has been precompiled to :js, can\n                give a V3 source map JSON\n\n  If the resource could not be resolved, the callback should be invoked with\n  nil.", :dynamic true}, :name cljs.js/*load-fn*, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 12, :method-params ([name cb]), :protocol-impl nil, :arglists-meta (), :column nil, :dynamic true, :line nil, :end-line 75, :max-fixed-arity 2, :fn-var true, :arglists nil, :doc "Each runtime environment provides a different way to load a library.\n  Whatever function *load-fn* is bound to will be passed two arguments - a\n  map and a callback function: The map will have the following keys:\n\n  :name   - the name of the library (a symbol)\n  :macros - modifier signaling a macros namespace load\n  :path   - munged relative library path (a string)\n\n  It is up to the implementor to correctly resolve the corresponding .cljs,\n  .cljc, or .js resource (the order must be respected). If :macros is true\n  resolution should only consider .clj or .cljc resources (the order must be\n  respected). Upon resolution the callback should be invoked with a map\n  containing the following keys:\n\n  :lang       - the language, :clj or :js\n  :source     - the source of the library (a string)\n  :cache      - optional, if a :clj namespace has been precompiled to :js, can\n                give an analysis cache for faster loads.\n  :source-map - optional, if a :clj namespace has been precompiled to :js, can\n                give a V3 source map JSON\n\n  If the resource could not be resolved, the callback should be invoked with\n  nil."}, atom? {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 41, :column 7, :end-line 41, :end-column 12, :arglists (quote ([x]))}, :name cljs.js/atom?, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, eval {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 501, :column 7, :end-line 501, :end-column 11, :arglists (quote ([state form cb] [state form opts cb])), :doc "Evaluate a single ClojureScript form. The parameters:\n\n   state (atom)\n     the compiler state\n\n   form (s-expr)\n     the ClojureScript source\n\n   opts (map)\n     compilation options.\n\n     :eval - the eval function to invoke, see *eval-fn*\n     :load - library resolution function, see *load-fn*\n\n   cb (function)\n     callback, will be invoked with a map. If successful the map will contain\n     a :value key with the result of evalution. If unsuccessful the map wil\n     contain a :error key with an ex-info instance describing the cause of\n     failure.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([state form cb] [state form opts cb]), :arglists ([state form cb] [state form opts cb]), :arglists-meta (nil nil)}}, :name cljs.js/eval, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([state form cb] [state form opts cb]), :arglists ([state form cb] [state form opts cb]), :arglists-meta (nil nil)}, :method-params ([state form cb] [state form opts cb]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 501, :max-fixed-arity 4, :fn-var true, :arglists ([state form cb] [state form opts cb]), :doc "Evaluate a single ClojureScript form. The parameters:\n\n   state (atom)\n     the compiler state\n\n   form (s-expr)\n     the ClojureScript source\n\n   opts (map)\n     compilation options.\n\n     :eval - the eval function to invoke, see *eval-fn*\n     :load - library resolution function, see *load-fn*\n\n   cb (function)\n     callback, will be invoked with a map. If successful the map will contain\n     a :value key with the result of evalution. If unsuccessful the map wil\n     contain a :error key with an ex-info instance describing the cause of\n     failure."}, load-deps {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 236, :column 8, :end-line 236, :end-column 17, :private true, :arglists (quote ([bound-vars ana-env lib deps cb] [bound-vars ana-env lib deps opts cb])), :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([bound-vars ana-env lib deps cb] [bound-vars ana-env lib deps opts cb]), :arglists ([bound-vars ana-env lib deps cb] [bound-vars ana-env lib deps opts cb]), :arglists-meta (nil nil)}}, :private true, :name cljs.js/load-deps, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 17, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([bound-vars ana-env lib deps cb] [bound-vars ana-env lib deps opts cb]), :arglists ([bound-vars ana-env lib deps cb] [bound-vars ana-env lib deps opts cb]), :arglists-meta (nil nil)}, :method-params ([bound-vars ana-env lib deps cb] [bound-vars ana-env lib deps opts cb]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 236, :max-fixed-arity 6, :fn-var true, :arglists ([bound-vars ana-env lib deps cb] [bound-vars ana-env lib deps opts cb])}, compile-str {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 584, :column 7, :end-line 584, :end-column 18, :arglists (quote ([state source cb] [state source name cb] [state source name opts cb])), :doc "Compile ClojureScript source into JavaScript. The parameters:\n\n   state (atom)\n     the compiler state\n\n   source (string)\n     the ClojureScript source\n\n   name (symbol)\n     optional, the name of the source\n\n   opts (map)\n     compilation options.\n\n     :load       - library resolution function, see *load-fn*\n     :source-map - set to true to generate inline source map information\n\n   cb (function)\n     callback, will be invoked with a map. If successful the map will contain\n     a key :value with the compilation result (string). If unsuccessful the map\n     will contain a key :error with an ex-info instance describing the cause\n     of failure.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([state source cb] [state source name cb] [state source name opts cb]), :arglists ([state source cb] [state source name cb] [state source name opts cb]), :arglists-meta (nil nil nil)}}, :name cljs.js/compile-str, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([state source cb] [state source name cb] [state source name opts cb]), :arglists ([state source cb] [state source name cb] [state source name opts cb]), :arglists-meta (nil nil nil)}, :method-params ([state source cb] [state source name cb] [state source name opts cb]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 584, :max-fixed-arity 5, :fn-var true, :arglists ([state source cb] [state source name cb] [state source name opts cb]), :doc "Compile ClojureScript source into JavaScript. The parameters:\n\n   state (atom)\n     the compiler state\n\n   source (string)\n     the ClojureScript source\n\n   name (symbol)\n     optional, the name of the source\n\n   opts (map)\n     compilation options.\n\n     :load       - library resolution function, see *load-fn*\n     :source-map - set to true to generate inline source map information\n\n   cb (function)\n     callback, will be invoked with a map. If successful the map will contain\n     a key :value with the compilation result (string). If unsuccessful the map\n     will contain a key :error with an ex-info instance describing the cause\n     of failure."}, ns->relpath {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 30, :column 7, :end-line 30, :end-column 18, :arglists (quote ([ns-sym])), :doc "Given a namespace as a symbol return the relative path sans extension"}, :name cljs.js/ns->relpath, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 18, :method-params ([ns-sym]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns-sym])), :doc "Given a namespace as a symbol return the relative path sans extension"}, analyze-deps {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 261, :column 8, :end-line 261, :end-column 20, :private true, :arglists (quote ([bound-vars ana-env lib deps cb] [bound-vars ana-env lib deps opts cb])), :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([bound-vars ana-env lib deps cb] [bound-vars ana-env lib deps opts cb]), :arglists ([bound-vars ana-env lib deps cb] [bound-vars ana-env lib deps opts cb]), :arglists-meta (nil nil)}}, :private true, :name cljs.js/analyze-deps, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([bound-vars ana-env lib deps cb] [bound-vars ana-env lib deps opts cb]), :arglists ([bound-vars ana-env lib deps cb] [bound-vars ana-env lib deps opts cb]), :arglists-meta (nil nil)}, :method-params ([bound-vars ana-env lib deps cb] [bound-vars ana-env lib deps opts cb]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 261, :max-fixed-arity 6, :fn-var true, :arglists ([bound-vars ana-env lib deps cb] [bound-vars ana-env lib deps opts cb])}, ns-side-effects {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 317, :column 8, :end-line 317, :end-column 23, :private true, :arglists (quote ([bound-vars ana-env ast opts cb] [load bound-vars ana-env {:keys [op], :as ast} opts cb])), :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([bound-vars ana-env ast opts cb] [load bound-vars ana-env {:keys [op], :as ast} opts cb]), :arglists ([bound-vars ana-env ast opts cb] [load bound-vars ana-env {:keys [op], :as ast} opts cb]), :arglists-meta (nil nil)}}, :private true, :name cljs.js/ns-side-effects, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 23, :top-fn {:variadic false, :max-fixed-arity 6, :method-params ([bound-vars ana-env ast opts cb] [load bound-vars ana-env {:keys [op], :as ast} opts cb]), :arglists ([bound-vars ana-env ast opts cb] [load bound-vars ana-env {:keys [op], :as ast} opts cb]), :arglists-meta (nil nil)}, :method-params ([bound-vars ana-env ast opts cb] [load bound-vars ana-env {:keys [op], :as ast} opts cb]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 317, :max-fixed-arity 6, :fn-var true, :arglists ([bound-vars ana-env ast opts cb] [load bound-vars ana-env {:keys [op], :as ast} opts cb])}, analyze-str* {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 379, :column 8, :end-line 379, :end-column 20, :private true, :arglists (quote ([bound-vars source name opts cb]))}, :private true, :name cljs.js/analyze-str*, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 20, :method-params ([bound-vars source name opts cb]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 379, :max-fixed-arity 5, :fn-var true, :arglists (quote ([bound-vars source name opts cb]))}, empty-state {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 103, :column 7, :end-line 103, :end-column 18, :arglists (quote ([] [init])), :doc "Construct an empty compiler state. Required to invoke analyze, compile,\n   eval and eval-str.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [init]), :arglists ([] [init]), :arglists-meta (nil nil)}}, :name cljs.js/empty-state, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [init]), :arglists ([] [init]), :arglists-meta (nil nil)}, :method-params ([] [init]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 103, :max-fixed-arity 1, :fn-var true, :arglists ([] [init]), :doc "Construct an empty compiler state. Required to invoke analyze, compile,\n   eval and eval-str."}, valid-opts? {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 47, :column 7, :end-line 47, :end-column 18, :arglists (quote ([x]))}, :name cljs.js/valid-opts?, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, wrap-error {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 100, :column 8, :end-line 100, :end-column 18, :private true, :arglists (quote ([ex]))}, :private true, :name cljs.js/wrap-error, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 18, :method-params ([ex]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ex]))}, *loaded* {:name cljs.js/*loaded*, :file "resources/public/js/out/cljs/js.cljs", :line nil, :column nil, :end-line 159, :end-column 14, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 159, :column 6, :end-line 159, :end-column 14}}, require {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 161, :column 7, :end-line 161, :end-column 14, :arglists (quote ([name cb] [name opts cb] [bound-vars name opts cb] [bound-vars name reload opts cb])), :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([name cb] [name opts cb] [bound-vars name opts cb] [bound-vars name reload opts cb]), :arglists ([name cb] [name opts cb] [bound-vars name opts cb] [bound-vars name reload opts cb]), :arglists-meta (nil nil nil nil)}}, :name cljs.js/require, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([name cb] [name opts cb] [bound-vars name opts cb] [bound-vars name reload opts cb]), :arglists ([name cb] [name opts cb] [bound-vars name opts cb] [bound-vars name reload opts cb]), :arglists-meta (nil nil nil nil)}, :method-params ([name cb] [name opts cb] [bound-vars name opts cb] [bound-vars name reload opts cb]), :protocol-impl nil, :arglists-meta (nil nil nil nil), :column nil, :line nil, :end-line 161, :max-fixed-arity 5, :fn-var true, :arglists ([name cb] [name opts cb] [bound-vars name opts cb] [bound-vars name reload opts cb])}, eval* {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 468, :column 8, :end-line 468, :end-column 13, :private true, :arglists (quote ([bound-vars form opts cb]))}, :private true, :name cljs.js/eval*, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 13, :method-params ([bound-vars form opts cb]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 468, :max-fixed-arity 4, :fn-var true, :arglists (quote ([bound-vars form opts cb]))}, file->ns {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 35, :column 7, :end-line 35, :end-column 15, :arglists (quote ([file]))}, :name cljs.js/file->ns, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 15, :method-params ([file]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 35, :max-fixed-arity 1, :fn-var true, :arglists (quote ([file]))}, sm-data {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 122, :column 8, :end-line 122, :end-column 15, :private true, :arglists (quote ([]))}, :private true, :name cljs.js/sm-data, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 122, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, compile-str* {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 536, :column 8, :end-line 536, :end-column 20, :private true, :arglists (quote ([bound-vars source name opts cb]))}, :private true, :name cljs.js/compile-str*, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 20, :method-params ([bound-vars source name opts cb]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 536, :max-fixed-arity 5, :fn-var true, :arglists (quote ([bound-vars source name opts cb]))}, prefix {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 128, :column 8, :end-line 128, :end-column 14, :private true, :arglists (quote ([s pre]))}, :private true, :name cljs.js/prefix, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 14, :method-params ([s pre]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 128, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s pre]))}, debug-prn {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 25, :column 7, :end-line 25, :end-column 16, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name cljs.js/debug-prn, :variadic true, :file "resources/public/js/out/cljs/js.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column nil, :line nil, :end-line 25, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, valid-name? {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 44, :column 7, :end-line 44, :end-column 18, :arglists (quote ([x]))}, :name cljs.js/valid-name?, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 18, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, load-macros {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 300, :column 8, :end-line 300, :end-column 19, :private true, :arglists (quote ([bound-vars k macros reload reloads opts cb]))}, :private true, :name cljs.js/load-macros, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 19, :method-params ([bound-vars k macros reload reloads opts cb]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 300, :max-fixed-arity 7, :fn-var true, :arglists (quote ([bound-vars k macros reload reloads opts cb]))}, eval-str {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 704, :column 7, :end-line 704, :end-column 15, :arglists (quote ([state source cb] [state source name cb] [state source name opts cb])), :doc "Evalute ClojureScript source given as a string. The parameters:\n\n  state (atom)\n    the compiler state\n\n  source (string)\n    the ClojureScript source\n\n  name (symbol)\n    optional, the name of the source\n\n  opts (map)\n    compilation options.\n\n    :eval         - eval function to invoke, see *eval-fn*\n    :load         - library resolution function, see *load-fn*\n    :source-map   - set to true to generate inline source map information\n    :cache-source - optional, a function to run side-effects with the\n                    compilation result prior to actual evalution. This function\n                    takes two arguments, the first is the eval map, the source\n                    will be under :source. The second argument is a callback of\n                    one argument. If an error occurs an :error key should be\n                    supplied.\n\n  cb (function)\n    callback, will be invoked with a map. If succesful the map will contain\n    a :value key with the result of evaluation and :ns the current namespace.\n    If unsuccessful will contain a :error key with an ex-info instance describing\n    the cause of failure.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([state source cb] [state source name cb] [state source name opts cb]), :arglists ([state source cb] [state source name cb] [state source name opts cb]), :arglists-meta (nil nil nil)}}, :name cljs.js/eval-str, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([state source cb] [state source name cb] [state source name opts cb]), :arglists ([state source cb] [state source name cb] [state source name opts cb]), :arglists-meta (nil nil nil)}, :method-params ([state source cb] [state source name cb] [state source name opts cb]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 704, :max-fixed-arity 5, :fn-var true, :arglists ([state source cb] [state source name cb] [state source name opts cb]), :doc "Evalute ClojureScript source given as a string. The parameters:\n\n  state (atom)\n    the compiler state\n\n  source (string)\n    the ClojureScript source\n\n  name (symbol)\n    optional, the name of the source\n\n  opts (map)\n    compilation options.\n\n    :eval         - eval function to invoke, see *eval-fn*\n    :load         - library resolution function, see *load-fn*\n    :source-map   - set to true to generate inline source map information\n    :cache-source - optional, a function to run side-effects with the\n                    compilation result prior to actual evalution. This function\n                    takes two arguments, the first is the eval map, the source\n                    will be under :source. The second argument is a callback of\n                    one argument. If an error occurs an :error key should be\n                    supplied.\n\n  cb (function)\n    callback, will be invoked with a map. If succesful the map will contain\n    a :value key with the result of evaluation and :ns the current namespace.\n    If unsuccessful will contain a :error key with an ex-info instance describing\n    the cause of failure."}, append-source-map {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 131, :column 8, :end-line 131, :end-column 25, :private true, :arglists (quote ([state name source sb sm-data {:keys [output-dir asset-path], :as opts}]))}, :private true, :name cljs.js/append-source-map, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 25, :method-params ([state name source sb sm-data p__24692]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 131, :max-fixed-arity 6, :fn-var true, :arglists (quote ([state name source sb sm-data {:keys [output-dir asset-path], :as opts}]))}, js-eval {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 95, :column 7, :end-line 95, :end-column 14, :arglists (quote ([{:keys [source], :as resource}])), :doc "A default JavaScript evaluation function."}, :name cljs.js/js-eval, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 14, :method-params ([p__24676]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 95, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [source], :as resource}])), :doc "A default JavaScript evaluation function."}, load-source-map! {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 118, :column 7, :end-line 118, :end-column 23, :arglists (quote ([state ns sm-json]))}, :name cljs.js/load-source-map!, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 23, :method-params ([state ns sm-json]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 118, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state ns sm-json]))}, eval-str* {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 627, :column 8, :end-line 627, :end-column 17, :private true, :arglists (quote ([bound-vars source name opts cb]))}, :private true, :name cljs.js/eval-str*, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 17, :method-params ([bound-vars source name opts cb]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 627, :max-fixed-arity 5, :fn-var true, :arglists (quote ([bound-vars source name opts cb]))}, load-analysis-cache! {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 115, :column 7, :end-line 115, :end-column 27, :arglists (quote ([state ns cache]))}, :name cljs.js/load-analysis-cache!, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 27, :method-params ([state ns cache]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 115, :max-fixed-arity 3, :fn-var true, :arglists (quote ([state ns cache]))}, analyze-str {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 424, :column 7, :end-line 424, :end-column 18, :arglists (quote ([state source cb] [state source name cb] [state source name opts cb])), :doc "Analyze ClojureScript source. The compiler state will be populated with\n   the results of analyzes. The parameters:\n\n   state (atom)\n     the compiler state\n\n   source (string)\n     the ClojureScript source\n\n   name (symbol)\n     optional, the name of the source\n\n   opts (map)\n     compilation options.\n\n   :eval - the eval function to invoke, see *eval-fn*\n   :load - library resolution function, see *load-fn*\n\n   cb (function)\n     callback, will be invoked with a map. If successful the map will contain\n     a key :value, the actual value is not meaningful. If unsuccessful the\n     map will contain a key :error with an ex-info instance describing the cause\n     of failure.", :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([state source cb] [state source name cb] [state source name opts cb]), :arglists ([state source cb] [state source name cb] [state source name opts cb]), :arglists-meta (nil nil nil)}}, :name cljs.js/analyze-str, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 5, :method-params ([state source cb] [state source name cb] [state source name opts cb]), :arglists ([state source cb] [state source name cb] [state source name opts cb]), :arglists-meta (nil nil nil)}, :method-params ([state source cb] [state source name cb] [state source name opts cb]), :protocol-impl nil, :arglists-meta (nil nil nil), :column nil, :line nil, :end-line 424, :max-fixed-arity 5, :fn-var true, :arglists ([state source cb] [state source name cb] [state source name opts cb]), :doc "Analyze ClojureScript source. The compiler state will be populated with\n   the results of analyzes. The parameters:\n\n   state (atom)\n     the compiler state\n\n   source (string)\n     the ClojureScript source\n\n   name (symbol)\n     optional, the name of the source\n\n   opts (map)\n     compilation options.\n\n   :eval - the eval function to invoke, see *eval-fn*\n   :load - library resolution function, see *load-fn*\n\n   cb (function)\n     callback, will be invoked with a map. If successful the map will contain\n     a key :value, the actual value is not meaningful. If unsuccessful the\n     map will contain a key :error with an ex-info instance describing the cause\n     of failure."}, *eval-fn* {:protocol-inline nil, :meta {:file "/Users/roman01la/projects/threejs-cljs-playground/resources/public/js/out/cljs/js.cljs", :line 91, :column 3, :end-line 91, :end-column 12, :doc "Each runtime environment provides various ways to eval JavaScript\n  source. Whatever function *eval-fn* is bound to will be passed a map\n  containing the following keys:\n\n  :source - the source of the library (string)\n  :name   - used to unique identify the script (symbol)\n  :cache  - if the source was originally ClojureScript, will be given the\n            analysis cache.\n\n  The result of evaluation should be the return value.", :dynamic true}, :name cljs.js/*eval-fn*, :variadic false, :file "resources/public/js/out/cljs/js.cljs", :end-column 12, :method-params ([js-source]), :protocol-impl nil, :arglists-meta (), :column nil, :dynamic true, :line nil, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists nil, :doc "Each runtime environment provides various ways to eval JavaScript\n  source. Whatever function *eval-fn* is bound to will be passed a map\n  containing the following keys:\n\n  :source - the source of the library (string)\n  :name   - used to unique identify the script (symbol)\n  :cache  - if the source was originally ClojureScript, will be given the\n            analysis cache.\n\n  The result of evaluation should be the return value."}}, :require-macros {cljs.js cljs.js, env cljs.env.macros, cljs.env.macros cljs.env.macros}, :cljs.analyzer/constants {:seen #{:load :path :features :cljs.analyzer/namespaces :output-dir :*reload-macros* :js :protocol-inline :meta :dup :macros-ns :analyze-deps :private :else :protocol-symbol :protocol :cljs.core/none :use-macros :excludes :macros :validator :default :num-fields :added :protocols :ns :def-emits-var :name :variadic :value :or :file :macro-ns :end-column :static :*data-readers* :lines :top-fn :read-cond :val :type :verbose :method-params :fallback-impl :protocol-impl :op :source :cache-source :js-provide :flush-on-newline :no-test :arglists-meta :imports :*load-macros* :passes :descendants :allow :anonymous :source-maps :column :ancestors :lang :readably :more-marker :asset-path :requires :positional :factory :keys :cache :methods :seen :*sm-data* :dynamic :line :protocol-info :load-macros :macro :print-length :uses :undeclared-ns :ok :*env* :record :defs :parents :declared :*analyze-deps* :info :ret-tag :source-map :end-line :context :reload :*compiler* :*cljs-ns* :order :error :reload-all :require-macros :*eval-fn* :max-fixed-arity :tag :mutable :reloads :cljs.analyzer/constants :fn-var :arglists :skip-protocol-flag :*load-fn* :eof :impls :alt-impl :ns-sym :doc :cljs.analyzer/numeric :keywordize-keys :jsdoc :clj :*cljs-dep-set* :cljs :gen-line :*passes* :dep-path :sources-content :deps :gen-col :cljs.core/not-found :eval}, :order [:source :error :cljs.analyzer/namespaces :use-macros :excludes :macros :name :imports :requires :uses :defs :require-macros :cljs.analyzer/constants :doc :cljs.analyzer/numeric :arglists :line :column :file :ns :macro :keys :or :private :added :protocol-inline :meta :protocols :variadic :end-column :method-params :protocol-impl :arglists-meta :factory :end-line :max-fixed-arity :fn-var :skip-protocol-flag :positional :top-fn :protocol-symbol :protocol-info :info :impls :methods :ret-tag :tag :num-fields :type :record :declared :protocol :dynamic :anonymous :jsdoc :static :seen :order :dup :else :cljs.core/none :validator :default :val :fallback-impl :flush-on-newline :no-test :descendants :ancestors :readably :more-marker :print-length :ok :parents :mutable :alt-impl :keywordize-keys :cljs.core/not-found :source-maps :source-map :gen-col :gen-line :output-dir :asset-path :lines :sources-content :verbose :*compiler* :*data-readers* :*load-macros* :*analyze-deps* :*load-fn* :*eval-fn* :load-macros :analyze-deps :load :eval :macro-ns :reload :reload-all :macros-ns :*env* :path :lang :cache :clj :value :js :undeclared-ns :ns-sym :js-provide :*cljs-dep-set* :dep-path :context :*reload-macros* :op :deps :reloads :*cljs-ns* :*sm-data* :*passes* :eof :read-cond :features :allow :cljs :def-emits-var :passes :cache-source]}, :doc nil}